[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/-ucQIGTc)
[![Open in Visual Studio Code](https://classroom.github.com/assets/open-in-vscode-718a45dd9cf7e7f842a935f5ebbe5719a5e09af4491e668f4dbf3b35d5cca122.svg)](https://classroom.github.com/online_ide?assignment_repo_id=15232892&assignment_repo_type=AssignmentRepo)
# SE-Assignment-2
Assignment: Introduction to Software Engineering
Instructions:
Answer the following questions based on your understanding of software engineering concepts. Provide detailed explanations and examples where appropriate.

Questions:
Define Software Engineering:
Is the systematic application of engineering principles and techniques of designing, developing,testing and maintaining of software systems.It is a software development that aims to create high-quality, reliable and maintainable.

What is software engineering, and how does it differ from traditional programming? Software engineering is the process of designing, developing,testing and maintaing software. Traditional programming on the other hand focus only pn the technical coding or writing of the software itself.
Software Development Life Cycle (SDLC): 1.Requirements gathering
2. Analysis 3. Design 4. Implementation 5. Testing 6. Deployment 7. Maintenance.

Explain the various phases of the Software Development Life Cycle. Provide a brief description of each phase.
1. Requirements gathering: Collecting user needs and defining software requirements.
2. Analysis: Breaking down requirements into smaller components and creating detailed design.
3. Design: Creating a detailed software design, including architecture and user interface.
4. Implementation: Writing software code.
5. Testing: Verifying that the software meets requirements and works as expected.
6. Deployment: Releasing the software to users.
7. Maintenance: Updating, fixing and enhancing the software over time.
Agile vs. Waterfall Models
Agile: Feasibility test takes a shorter while considerably. Clients are engaged in the early project phase to get the buy-in and refine the needs in the long run.
The development gets tallied in each sprint.
You can switch roles quickly and the team can work in cycles.
There's  a need to file requirements, build designs and write test plans tp promote working software delivery.
Waterfall: Feasibility evaluation takes a long phase and is done in advance to avoid reworking in the next project phases.
Project progress gets monitored according to the project plan.
Documentation gets a lot of emphasis that is pretty comprehensive.
   


Compare and contrast the Agile and Waterfall models of software development. What are the key differences, and in what scenarios might each be preferred?
Requirements Engineering:
Agile: Cyclical phases- Iterative and Incremental development wherby the software is built incrementally small, manageable chunks. 
Continuous delivery- Customer collaboration, encourage customer involvement and feedback throughout the development cycle.
Responsive to change- Flexibility and adaptability, it allows for changes and adaptation to requirements even late in the development process.
Waterfall: Linear phases- follows a linear and sequential approach with distinct phases for requirements of design, implementation,testing and maintenance.
Delivery at the end of a project-changes to requirements are difficult to accommodate once a phase is completed.
Upfront planning- suited for projects with well-defined and stable requirements. Emphasises extensive documentation at each stage of development.
Preferred Scenarios 
Agile preferred for projects with evolving or unclear requirements where customers involvement is important and when rapid delivery of a working product is essential.
Waterfall suited for projects with well-defined and stable requirements where predictability and extensive documentation are crucial such as in certain government or regulatory environments.
Difficult to assess performance
What is requirements engineering? Describe the process and its importance in the software development lifecycle.
Requirements engineering is the process of defining, analysing, documentation and maintenaning software requirements.It is important in ensuring that software meets user needs and developed on time and within budget. Involves; 1.Elicitation- Gathering user needs and expectations.
2.Analysis - Breaking down requirements in small chuncks.
3.Specification - Documenating requirements in a clear and concise approach.
4.Validation-Verifying that requirements are complete and accurate.
Software Design Principles:
Separation of concerns 
Encapsulation and abstraction 
Loose coupling and high cohesion
Scalability and performance 
Resilience to fault tolerance 
Security and privacy 

Explain the concept of modularity in software design. How does it improve maintainability and scalability of software systems?
Modularity- Of a system independently by breaking down software into smaller, self-contained modules, making the system simpler to comprehend, test and alter without affecting the entire system.
Testing in Software Engineering:
1. Unit testing
2. Integration testing
3. System testing
4. Acceptance testing
Describe the different levels of software testing (unit testing, integration testing, system testing, acceptance testing). Why is testing crucial in software development?Is the process of checking the quality, functionality and performance to ensure that the software meets requirements and works as expected to.
1. Unit testing: testing individual program or procedure.
2. Integration testing: find interface defects between modules or functions.
3. System testing: testing entire software system.
4. Acceptance testing: determine whether the sIs the process of checking the quality, functionality and performance to ensure that the software meets requirements and works as expected to.

Version Control Systems:

What are version control systems, and why are they important in software development? Give examples of popular version control systems and their features.
Is a special software tool that developers use to keep track of all changes they make to their files with code and other types of files.
The importance of this system is that it can easily go back in time to see earlier versions of your work and manage them smoothly. It provides convenient collaboration by allowing multiple developers country wide to work concurrently on a project without disrupting each other's work. It also serve as a backup mechanism that can help recover your work.
Git- is free and open source and can easily installed on Windows,macOS, Linux and all unix-based platforms. It is centralised around single server with full copy of the repository on their own machine. it also a standalone program as a server or client. its fast and efficient. Git allows you to either track your own private work or host a code on public servers such as Github and Gitlab to share it with others.
Software Project Management:

Discuss the role of a software project manager. What are some key responsibilities and challenges faced in managing software projects?
A software project manager plays an important role in leading and directing software development projects from conception to delivery.
Responsibilities:
1. Project planning -Defining project scope, goals, timelines, budget and resources.
2. Team management - Leading and motivating cross-functional teams, including developers, designers and testers.
3. Closure- Formalising project completion, documenting lesson learned and evaluating project success.
Challenges:
1. Scope creep: Managing changing projects requirements and scope.
2. Time and budgets: Working on a tight timeline and budget. Making sure to deliver projects within.
3. Adapting to change: Coping with change project requirements, technology and business needs.
Software Maintenance:

Define software maintenance and explain the different types of maintenance activities. Why is maintenance an essential part of the software lifecycle?
Corrective Software Maintenance
Identifying and fixing errors, bugs and defects in the software. This maintenance is done after a problem has been reported.
Adaptive Software Maintenance
Modifying the software to adapt to ever-changing environment, technology or users needs. It's to ensure that the software remain compatible and functional with other evolving systems.
Perfective Software Maintenance
Improves the software performance, usability and functionality. It focuse on focusing on enhancing the software's quality and adding new features.
Preventive Software Maintenance
Taking proactive measures to prevent errors, bugs and defects from occurring in the first place. It involves activities such as code reviews, testing and refactoring to ensure the software remains stable and maintainable.
Ethical Considerations in Software Engineering:

What are some ethical issues that software engineers might face? How can software engineers ensure they adhere to ethical standards in their work?
1. Privacy and security- Protecting users' personal data and maintaining confidentiality. That software is secure and doesn't compromise users' safety.
2. Intellectual property -Respecting patents, copyrights and trade secrets.
3. Bias and discrimination - Avoiding software that continues bias and discrimination.
How software engineer adhere to ethical standards is to familiarise themselves to codes of ethics (eg, ACM code of ethics), consider ethical implementation in design and development, seek guidance from colleagues, mentors or ethics committee, continuously update their knowledge and skills to address emerging ethical issues.

Submission Guidelines:
Your answers should be well-structured, concise, and to the point.
Provide real-world examples or case studies wherever possible.
Cite any references or sources you use in your answers.
Submit your completed assignment by [due date].
